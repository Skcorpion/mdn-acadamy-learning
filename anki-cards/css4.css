/* Flexbox 

Nested flex boxes 
section - article
          article
          article - div - button   
                    div   button
                    div   button
                          button
                          button  
*/

section {display: flex;}

article {flex: 1 200px;}
article:nth-of-type(3) {
    flex: 3 200px;
    display: flex;
    flex-flow: column;
}

article:nth-of-type(3) div:first-child {
    flex:1 100px;
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    justify-content: space-around;
  }

button {
    flex: 1 auto;
    margin: 5px;
    font-size: 18px;
    line-height: 1.5;
}

/* ____________________________________ 
                    Grid */

.container {
    display: grid;
    grid-template-columns: 200px 200px 200px;
    grid-gap: 20px;
}
/* ------------------------------------
Flexible grids with the fr unit */
.container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
}

/* --------------------------
Repeating track listings */

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
}
/* The implicit and explicit grid 
by default tracks auto sized*/

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: 100px;
  }

/* The minmax() function */

.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: minmax(100px, auto);
  }

/* As many columns as will fit */

.container {
    display: grid;
    grid-template-columns: repeat(autofill, minmax(200px, 1fr));
}

/* --------------------------------------
        Line-based placement

    grid-column-start
    grid-column-end
    grid-row-start
    grid-row-end
        or
    grid-column
    grid-row
*/
header {
    grid-column: 1 / 3;
    grid-row: 1;
  } 
article {
    grid-column: 2;
    grid-row: 2;
  } 
aside {
    grid-column: 1;
    grid-row: 2;
  } 
footer {
    grid-column: 1 / 3;
    grid-row: 3;
  }

  /* --------------------------------
  Positioning with grid-template-areas

  To leave a cell empty, use a . (period).*/
  .container {
    display: grid;
    grid-template-areas: 
        "header header"
        "sidebar content"
        "footer footer";
    grid-template-columns: 1fr 3fr;
  }
  header {grid-area: header;}
  article {grid-area: content;}
  aside {grid-area: sidebar;}
  footer {grid-area: footer;}

/* _____________________________________
                
                    Floats

<div class="wrapper">
<div class="box">Float</div>

<p>Some long text....</p>
 </div>   
<p class="cleared">Some other long text..</p>
                    
*/
.box {
    /* two properties to float */
    float: left;
    margin: 15px;
}

/*  left: Clear items floated to the left.
    right: clear items floated to the right.
    both: clear any floated items, left or right. */ 
.cleared {
    clear:left;
}

/* |3| display: flow-root - This exists only to create a BFC without using hacks */
.wrapper {
    display: flow-root;
}

/*_______________________________________
        Positioning

Identifying the containing block

If the position property is absolute, the containing block is formed by the edge of the 
padding box of the nearest ancestor element that has a position value other than static 
(fixed, absolute, relative, or sticky).

----------------------------
Introducing z-index
*/
p:nth-of-type(1) {
          position: absolute;
          background: lime;
          top: 10px;
          right: 30px;
          z-index: 1; 
/* change z-axis: by default = auto(0) */
}

/* ___________________________________

Multiple-column layout
*/
.container {
    /* column-count: 3; */
    column-width: 200px;
    column-gap: 20px;
    column-rule: 4px dotted rgb(79, 185, 227); /* shorthand same like border: -color, -style, -width */
}
/* Sometimes, this breaking will happen in places that lead to a poor reading experience */
.card {
    break-inside: avoid; /* properties to control breaking of content in multicol and in paged media */
    page-break-inside: avoid; /* + add older property (for best brouser support) */
}

/* ____________________________
     our support property */
@supports (display: grid) {
    .item {
      width: auto; 
    }
  }